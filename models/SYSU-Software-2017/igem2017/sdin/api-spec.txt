GET: /api/parts
    parameters:
        name: string, default: ""

    return: {
        success: boolean
        parts: array of {
            id: integer
            name: string
        }
    }

GET: /api/part
    parameters:
        id: integer, no default

    return: {
        success: boolean
        id: integer
        name: string
        description: string
        type: string
        subparts: array of {
            id: integer,
            name: string,
            description: string,
            type: string
        }
    }

POST: /api/part
    parameters: {
        name: string
        description: string
        type: string
        subparts: array of integer, integer for ID
    }

    response: {
        success: boolean
        id: integer
    }

# NOTE api changed, add related parts and keywords
GET: /search/work
    parameters: {
        q: string
        medal: gold, sliver, bronze or any
        track: #NOTE Hungarian notation and ignore & for multi-word, eg. artDesign, any if not specific
        year: 2016 or any
    }

    render: {
        resultsCount: integer
        works: array of {
            id: integer (-1 for not in database)
            image: string (url)
            year: integer or string
            teamName: string
            projectName: string
            school: string # NOTE no field in database
            risk: integer or string # NOTE no field in database
            medal: string
            description: string
            chassis: string
            rewards: array of string
            isFavourite: boolean
        }
        keywords: array of string
        # when encounter specific keywork
        additional: {
            'description': xxx,
            'link': [xxx, xxx] array,
            'picture': xxx,
            'related': [xxx, xxx] word array,
            'yearRelation': {
                '2012': xxx, # float, display as a chart
                '2013': xxx
                ...
            },
            'trackRelation': {
                'Software': xxx # float
                ...
            },
            'medalRelation': {
                'gold medal': xxx # float
                ...
            },
            'weightedRelated': [[float(weight), keyword], [,]],
            'suggestedProject': [[float, projectname]],
            'suggestedPart': [[float, partname]]
        }

    }

# part searching is in /api/parts above
GET: /search/part
    parameters: {
        q: string
    }

    render: {
        resultsCount: integer
        parts: array of {
            id: integer (-1 for not in database)
            name: string
            group: string
            date: string
            description: string
            type: string
            releaseStatus: string
            sampleStatus: string
            rating: integer
            use: integer
            partResult: string
            parameters: string (url?) # WTF?
        }
    }

# assume search_paper.html
GET: /search/paper
    parameters: {
        q: string
    }

    render: {
        resultsCount: integer
        papers: array of {
            id: integer (-1 for not in database)
            title: string
            author: string
            DOI: string
            abstract: string
            JIF: float
            logo: string (url)
            circuitId: xxx (id)
        }
    }

GET: /work
    parameters: {
        id: integer,
    }

    render: {
        projectName: string
        year: integer or string
        readCount: integer
        medal: string
        rewards: array of string
        description: string
        isFavourite: boolean
        images: array of string(url)
        designId: array of integer (to be discussed)
        part: array of {
            BBa: string
            name: string
            isFavourite: boolean
        }
    }

# assume paper.html
GET: /paper
    parameters: {
        id: integer,
    }

    render: {
        title: string
        DOI: string
        abstract: string
        JIF: string
        keywords: string
        designId: array of integer (to be discussed)
        part: array of {
            name: string
            isFavourite: boolean
        }
        authors: array of string
    }
